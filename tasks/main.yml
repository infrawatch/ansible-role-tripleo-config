---
# NOTE: Anything that is in here is done every time you call the
# tripleo_role
# This means you should add variable parsing and setting here.

- name: Report what deployment stage we're at
  debug:
    msg: "This is deployment stage {{ deploy_stage }}"

- name: Create initial plugins list
  set_fact:
    collectd_plugins: "{{ (collectd_default_plugins + collectd_extra_plugins) | unique }}"

- name: Set up conditionals
  set_fact:
    amqp_connection: "{{ (collectd_connection_type == 'amqp1')|default(false) }}"
    amqp_default_connection: "{{ (collectd_amqp_host == 'nil')|default(false) }}"
    amqp_default_interval: "{{ (collectd_amqp_interval|int == -666)|default(false) }}"
    collectd_connection: "{{ (collectd_connection_type == 'network')|default(false) }}"
    sensubility_needs_sudo: "{{ (collectd_sensubility_exec_sudo_rule != '')| default(false) }}"

- debug:
    var: "{{ item }}"
  with_items:
    - amqp_connection
    - amqp_default_connection
    - amqp_default_interval
    - collectd_connection
    - sensubility_needs_sudo
    - collectd_extra_plugins

- name: "Update plugin list"
  set_fact:
    collectd_extra_plugins: "{{ (collectd_extra_plugins + 'cpu df load connectivity intel_rdt ipmi procevent'.split() ) | unique }}"
  when: enable_stf|bool

- debug:
    var: collectd_extra_plugins

- name: Set up amqp connection to collectd
  when: amqp_connection
  block:
    - name: "Add amqp1 to the list of plugins to enable"
      set_fact:
        collectd_plugins: "{{ ( collectd_plugins + ['amqp1']) | unique }}"
    - name: "Configure transport, address, instances and retry_delay for amqp1"
      set_fact:
        collectd_plugin_amqp1_transport: "{{ collectd_amqp_transport_name }}"
        collectd_plugin_amqp1_address: "{{ collectd_amqp_address }}"
        collectd_plugin_amqp1_instances: "{{ collectd_amqp_instances }}"
        collectd_plugin_amqp1_retry_delay: "{{ collectd_amqp_retry_delay }}"
    - name: "Set the interval for the amqp1 plugin"
      when: "{{ not amqp_default_interval }}"
      set_fact:
        collectd_plugin_amqp1_interval: "{{ collectd_amqp_interval }}"
#       - if:
#         - amqp_default_connection
#         - tripleo::profile::base::metrics::collectd::amqp_host:
#             str_replace:
#               template:
#                 "%{hiera('$NETWORK')}"
#               params:
#                 $NETWORK:
#                   get_param:
#                     - ServiceNetMap
#                     - str_replace:
#                         template: "ROLENAMEMetricsQdrNetwork"
#                         params:
#                           ROLENAME: {get_param: RoleName}
    # TODO(efoley): This can be tested at the moment, the default/lookup case
    # above needs additional work (i.e. hieradata lookup)
    - name: "Use the default values for the AMQP connection"
      when: "{{ amqp_default_connection }}"
      set_fact:
        # TODO: Figure out what to do with this, maybe do the hiera data
        # lookup here or in THT
        # TODO: Re-enable the lookup
        # This should look up {{ role_name }}MetricsQdrNetwork
        # collectd_plugin_amqp1_host: "{{ lookup('hiera', role_name + 'MetricsQdrNetwork') }}"
        collectd_plugin_amqp1_host: "RoleNameMetricsQdrNetwork"
        collectd_plugin_amqp1_port: "{{ metrics_qdr_port }}"
        collectd_plugin_amqp1_user: "{{ metrics_qdr_username }}"
        collectd_plugin_amqp1_password: "{{ metrics_qdr_password }}"

    - name: "Set up user-defined amqp connection"
      when: "{{ not amqp_default_connection }}"
      set_fact:
        collectd_plugin_amqp1_host: "{{ collectd_amqp_host }}"
        collectd_plugin_amqp1_port: "{{ collectd_amqp_port  }}"
        collectd_plugin_amqp1_user: "{{ collectd_amqp_user }}"
        collectd_plugin_amqp1_password: "{{ collectd_amqp_password }}"

- name: Set up collectd connection to external collectd instance
  when: collectd_connection
  block:
    - name: "Add network to the list of plugins to enable"
      set_fact:
        collectd_plugins: "{{ collectd_plugins + ['network'] | unique }}"

    - debug:
        msg: "Collectd plugin list has been updated, the following plugins will be enabled: {{ collectd_plugins }}"

    - name: "Create the collectd network config."
      when: collectd_server != ''
      block:
        - name: "Populate the initial config for network server."
          set_fact:
            collectd_plugin_network_server:
              name: "{{ collectd_server }}"
              port: "{{ collectd_server_port | default(omit) }}"
              username: "{{ collectd_username | default(omit) }}"
              password: "{{ collectd_password | default(omit) }}"
              securitylevel: "{{ collectd_security_level }}"

        - name: "Show the (initial) network server config (may contain empty values which need to be removed)."
          debug:
            var: collectd_plugin_network_server

        - name: "Filter out the empty string values from the network server config"
          set_fact:
            collectd_plugin_network_server:
              - '{{ collectd_plugin_network_server | dict2items | rejectattr("value", "equalto", "") | list | items2dict }}'

        - name: "Show the updated network server config, which has empty values removed."
          debug:
            var: collectd_plugin_network_server

- name: Enable sqlalchemy
  # TODO: check does the puppet tripleo::...::collectd::enable_sqlalchemy role
  # do anything besides set up the config
  # https://github.com/openstack/puppet-tripleo/blob/master/manifests/profile/base/metrics/collectd/sqlalchemy_collectd.pp
  when: enable_sqlalchemy_collectd
  set_fact:
    todo: true

# Do I need to break these into separate support tasks?
- name: "Configure collectd to run collectd-sensubility via collectd-exec"
  set_fact:
    todo: true
  when: collectd_enable_sensubility
# This can probably be called enable plugin, or create plugin list, and can
# enable plugins based whether STF, etc is enabled

# TODO:  Above this line, set up the configs, and do whatever needs to be done before each stage can be run
- name: Include tasks for deploy stage
  include_tasks: "{{ deploy_stage }}.yml"
